datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


model Profile {
  id            String    @id @default(uuid()) @db.Uuid
  email         String    @unique
  firstName     String   @map("first_name")
  lastName      String   @map("last_name")

  username      String    @unique @map("username")
  fcmToken      String?   @unique @map("fcm_token")
  lastSeenAt    DateTime? @map("last_seen_at")

  ownedProjects   Project[]           @relation("OwnedProjects")
  memberships     ProjectMember[]     @relation("ProjectMemberships")
  assignedTasks   Task[]
  notifications   Notification[]      @relation("UserNotifications")
  
  conversations   ConversationParticipant[]
  messages        Message[]

  sentConnections     Connection[] @relation("SentConnections")
  receivedConnections Connection[] @relation("ReceivedConnections")

  @@map("profiles")
}


model Project {
  id      String         @id @default(uuid()) @db.Uuid
  name    String
  ownerId String         @db.Uuid @map("owner_id")
  owner   Profile        @relation("OwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  members ProjectMember[]  @relation("ProjectMembers")
  channels Channel[]

  @@map("projects")
}


model Channel {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  topic     String?
  createdAt DateTime @default(now()) @map("created_at")
  
  projectId String   @db.Uuid @map("project_id")
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  messages  Message[]
  tasks     Task[]

  @@map("channels")
}


model ProjectMember {
  projectId String  @db.Uuid @map("project_id")
  project   Project @relation("ProjectMembers", fields: [projectId], references: [id], onDelete: Cascade)
  profileId String  @db.Uuid @map("profile_id")
  profile   Profile @relation("ProjectMemberships", fields: [profileId], references: [id], onDelete: Cascade)

  @@id([projectId, profileId])
  @@map("project_members")
}


model Task {
  id          String    @id @default(uuid()) @db.Uuid
  title       String
  description String?
  status      Status    @default(TODO)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  channelId   String    @db.Uuid @map("channel_id")
  channel     Channel   @relation(fields: [channelId], references: [id], onDelete: Cascade)

  assigneeId  String?   @db.Uuid @map("assignee_id")
  assignee    Profile?  @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  @@map("tasks")
}


model Notification {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at")
  read        Boolean  @default(false)
  type        String
  content     Json
  linkUrl     String?  @map("link_url")

  recipientId String   @db.Uuid @map("recipient_id")
  recipient   Profile  @relation("UserNotifications", fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}


model Conversation {
  id           String                    @id @default(uuid()) @db.Uuid
  createdAt    DateTime                  @default(now()) @map("created_at")
  participants ConversationParticipant[]
  messages     Message[]

  @@map("conversations")
}


model ConversationParticipant {
  profileId      String       @db.Uuid @map("profile_id")
  profile        Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)
  conversationId String       @db.Uuid @map("conversation_id")
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@id([profileId, conversationId])
  @@map("conversation_participants")
}


model Message {
  id        String   @id @default(uuid()) @db.Uuid
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  authorId  String   @db.Uuid @map("author_id")
  author    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  channelId      String?       @db.Uuid @map("channel_id")
  channel        Channel?      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  
  conversationId String?       @db.Uuid @map("conversation_id")
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
}


model Connection {
  requesterId String  @db.Uuid @map("requester_id")
  requester   Profile @relation("SentConnections", fields: [requesterId], references: [id], onDelete: Cascade)

  addresseeId String  @db.Uuid @map("addressee_id")
  addressee   Profile @relation("ReceivedConnections", fields: [addresseeId], references: [id], onDelete: Cascade)

  status      String @default("PENDING")

  @@id([requesterId, addresseeId])
  @@map("connections")
}



enum Status {
   TODO
   IN_PROGRESS
   DONE
   CANCELED
}
enum Priority {
   LOW
   MEDIUM
   HIGH
}

enum ConnectionStatus {
   PENDING
   ACCEPTED
}