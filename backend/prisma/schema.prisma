// datasource db defines the database connection details.
datasource db {
provider     = "postgresql"
url          = env("DATABASE_URL")
relationMode = "prisma"
}

generator client {
provider = "prisma-client-js"
}


model User {

id            String    @id
email         String?   @unique
username      String?   @unique


photoURL      String?
fcmToken      String?   @unique
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt

createdProjects Project[] @relation("ProjectCreator")
memberOf        Project[] @relation("ProjectMembers")
createdTasks    Task[]    @relation("TaskCreator")
assignedTo      Task[]    @relation("TaskAssignee")
authored        Message[] @relation("MessageAuthor")
conversations   Conversation[] @relation("ConversationParticipants")

}

// =============================================
//              PROJECT & TASK MODELS
// =============================================
model Project {
id          String    @id @default(uuid())
name        String
description String?
createdAt   DateTime  @default(now())
updatedAt   DateTime  @updatedAt

creator     User      @relation("ProjectCreator", fields: [creatorId], references: [id])
creatorId   String
members     User[]    @relation("ProjectMembers")
tasks       Task[]
channels    Channel[]
@@index([creatorId])
}

model Task {
id          String   @id @default(uuid())
title       String
description String?
status      String   @default("pending") // e.g., pending, in_progress, completed
priority    String   @default("medium")  // e.g., low, medium, high
dueDate     DateTime?
createdAt   DateTime @default(now())
updatedAt   DateTime @updatedAt

creator     User     @relation("TaskCreator", fields: [creatorId], references: [id])
creatorId   String
assignee    User?    @relation("TaskAssignee", fields: [assigneeId], references: [id])
assigneeId  String?

project     Project  @relation(fields: [projectId], references: [id])
projectId   String
@@index([creatorId])
@@index([assigneeId])
@@index([projectId])
}

// =============================================
//              COMMUNICATION MODELS
// =============================================
model Channel {
id          String    @id @default(uuid())
name        String
description String?
createdAt   DateTime  @default(now())

project     Project   @relation(fields: [projectId], references: [id])
projectId   String
messages    Message[]
@@index([projectId])
}

model Conversation {
id        String    @id @default(uuid())
createdAt DateTime  @default(now())
updatedAt DateTime  @updatedAt

participants User[]   @relation("ConversationParticipants")
messages     Message[]
}

model Message {
id        String    @id @default(uuid())
content   String
createdAt DateTime  @default(now())

author    User      @relation("MessageAuthor", fields: [authorId], references: [id])
authorId  String

channel         Channel?      @relation(fields: [channelId], references: [id])
channelId       String?
conversation    Conversation? @relation(fields: [conversationId], references: [id])
conversationId  String?
@@index([authorId])
@@index([channelId])
@@index([conversationId])
}


