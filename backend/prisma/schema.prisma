generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // List both schemas so Prisma can see them
  schemas  = ["public"]
}

//
// MODELS (public)
//
model Profile {
  id          String    @id @db.Uuid // FK to auth.users.id
  email       String    @unique
  role        Role      @default(MEMBER)
  firstName   String?   @map("first_name")
  lastName    String?   @map("last_name")
  displayName String    @map("display_name")

  ownedProjects Project[] @relation("OwnedProjects")
  assignedTasks Task[]    @relation("AssignedTasks")
  comments      Comment[]

  @@map("profiles")
  @@schema("public")
}

model Project {
  id   Int    @id @default(autoincrement())
  name String

  ownerId String  @db.Uuid @map("owner_id")
  owner   Profile @relation("OwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)

  tasks Task[]

  @@map("projects")
  @@schema("public")
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      Status    @default(TODO)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  projectId Int     @map("project_id")
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  assigneeId String?  @db.Uuid @map("assignee_id")
  assignee   Profile? @relation("AssignedTasks", fields: [assigneeId], references: [id], onDelete: SetNull)

  comments Comment[]

  @@map("tasks")
  @@schema("public")
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  userId String  @db.Uuid @map("user_id")
  author Profile @relation(fields: [userId], references: [id], onDelete: Cascade)

  taskId Int     @map("task_id")
  task   Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("comments")
  @@schema("public")
}

//
// ENUMS (public)
//
enum Role {
  ADMIN
  MEMBER

  @@schema("public")
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
  CANCELED

  @@schema("public")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@schema("public")
}

