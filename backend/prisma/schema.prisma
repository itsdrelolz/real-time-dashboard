datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public"]
}

generator client {
  provider = "prisma-client-js"
}


model Profile {
  id              String          @id @db.Uuid
  email           String          @unique
  role            Role            @default(MEMBER)
  firstName       String?         @map("first_name")
  lastName        String?         @map("last_name")
  displayName     String          @map("display_name")

  ownedProjects   Project[]       @relation("OwnedProjects")
  memberships     ProjectMember[] @relation("ProjectMemberships")
  assignedTasks   Task[]
  
  messages        Message[]

  conversations   Conversation[]

  @@map("profiles")
  @@schema("public")
}

model Project {
  id      Int             @id @default(autoincrement())
  name    String
  ownerId String          @db.Uuid @map("owner_id")
  owner   Profile         @relation("OwnedProjects", fields: [ownerId], references: [id], onDelete: Cascade)
  members ProjectMember[] @relation("ProjectMembers")
  tasks   Task[]
  
  channels Channel[]

  @@map("projects")
  @@schema("public")
}

model ProjectMember {
  projectId Int     @map("project_id")
  project   Project @relation("ProjectMembers", fields: [projectId], references: [id], onDelete: Cascade)
  profileId String  @db.Uuid @map("profile_id")
  profile   Profile @relation("ProjectMemberships", fields: [profileId], references: [id], onDelete: Cascade)

  @@id([projectId, profileId])
  @@map("project_members")
  @@schema("public")
}

model Task {
  id          Int       @id @default(autoincrement())
  title       String
  description String?
  status      Status    @default(TODO)
  priority    Priority  @default(MEDIUM)
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  projectId   Int       @map("project_id")
  project     Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assigneeId  String?   @db.Uuid @map("assignee_id")
  assignee    Profile?  @relation(fields: [assigneeId], references: [id], onDelete: SetNull)

  channel     Channel?

  @@map("tasks")
  @@schema("public")
}


model Channel {
  id          Int      @id @default(autoincrement())
  name        String
  description String?

  projectId Int
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)

  taskId    Int?     @unique @map("task_id")
  task      Task?    @relation(fields: [taskId], references: [id], onDelete: SetNull)

  messages  Message[]

  @@map("channels")
  @@schema("public")
}

model Conversation {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now()) @map("created_at")

  participants Profile[]
  messages     Message[]

  @@map("conversations")
  @@schema("public")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now()) @map("created_at")

  authorId  String   @db.Uuid @map("author_id")
  author    Profile  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  channelId      Int? @map("channel_id")
  channel        Channel?      @relation(fields: [channelId], references: [id], onDelete: Cascade)
  conversationId Int? @map("conversation_id")
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@map("messages")
  @@schema("public")
}

// ## ENUMS ##

enum Role {
  ADMIN
  MEMBER

  @@schema("public")
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
  CANCELED

  @@schema("public")
}

enum Priority {
  LOW
  MEDIUM
  HIGH

  @@schema("public")
}
