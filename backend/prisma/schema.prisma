// datasource db defines the database connection details.
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

// =============================================
//              USER & AUTH
// =============================================
model User {
  id        String   @id
  email     String?  @unique
  username  String   @unique
  photoURL  String?
  fcmToken  String?  @unique // For Push Notifications (Firebase Cloud Messaging)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdWorkspaces Workspace[]       @relation("WorkspaceCreator")
  workspaceMembers  WorkspaceMember[] // Explicit N:M relation for members

  // Communication
  authoredMessages    Message[]
  conversationMembers ConversationParticipant[] @relation("ConversationParticipants")
  // Task relationships
  createdTasks        Task[]                    @relation("TaskCreator")
  assignedTasks       Task[]                    @relation("TaskAssignee")

  // Presence and activity (Stored in Redis, but persisted here for history)
  presence            UserPresence?
  messageReadStatuses MessageReadStatus[]
}

// =============================================
//              WORKSPACE & TASK MODELS (Simplified)
// =============================================

model Workspace {
  id          String   @id @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  creator   User              @relation("WorkspaceCreator", fields: [creatorId], references: [id])
  creatorId String
  members   WorkspaceMember[] // Explicit relation to members
  channels  Channel[]
  tasks     Task[]

  @@index([creatorId])
}

// Explicit N:M relationship for Workspace Members
model WorkspaceMember {
  userId      String
  workspaceId String
  joinedAt    DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])

  @@id([userId, workspaceId])
  @@index([workspaceId])
}

model Task {
  id          String    @id @default(uuid())
  title       String
  description String?
  status      String    @default("pending")
  priority    String    @default("medium")
  dueDate     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  creator    User    @relation("TaskCreator", fields: [creatorId], references: [id])
  creatorId  String
  assignee   User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  assigneeId String?

  // Tasks belong directly to a Workspace (Project)
  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String

  @@index([creatorId])
  @@index([assigneeId])
  @@index([workspaceId])
}

// =============================================
//              COMMUNICATION MODELS
// =============================================

// Channel is for group communication within a Workspace
model Channel {
  id          String   @id @default(uuid())
  name        String
  description String?
  isPrivate   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  workspace   Workspace @relation(fields: [workspaceId], references: [id])
  workspaceId String
  messages    Message[]

  @@index([workspaceId])
  @@index([createdAt])
}

// Conversation is for Direct Messages (DMs)
model Conversation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Explicit N:M relation for participants to simplify queries (Max 2 participants)
  participants ConversationParticipant[]
  messages     Message[]

  @@index([createdAt])
}

model ConversationParticipant {
  userId         String
  conversationId String

  user         User         @relation("ConversationParticipants", fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])

  @@id([userId, conversationId])
  @@index([conversationId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  // Message belongs to either a channel OR a conversation (Direct Message)
  channel        Channel?      @relation(fields: [channelId], references: [id])
  channelId      String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id])
  conversationId String?

  readStatuses MessageReadStatus[] // Used for "read receipts"

  @@index([authorId])
  @@index([channelId])
  @@index([conversationId])
  @@index([createdAt])
}

// =============================================
//              ACTIVITY & PRESENCE
// =============================================

// MessageReadStatus simplifies tracking read receipts
model MessageReadStatus {
  userId    String
  messageId String
  readAt    DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])

  @@id([userId, messageId])
}

// UserPresence will contain a single record per user
model UserPresence {
  userId    String   @id @unique
  status    String   @default("offline") // offline, online, idle, away (Crucial real-time data)
  lastSeen  DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@index([status])
}
