generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id          String    @id @db.Uuid
  email       String    @unique
  role        Role      @default(MEMBER)
  firstName   String?
  lastName    String?
  displayName String

  ownedProjects Project[] @relation("OwnedProjects")
  assignedTasks Task[]    @relation("AssignedTasks")
  comments      Comment[]

  @@map("profiles") // Explicitly maps model to the "profiles" table in the DB
}

model Project {
  id      Int    @id @default(autoincrement())
  name    String
  ownerId String @db.Uuid
  owner   Profile @relation("OwnedProjects", fields: [ownerId], references: [id])
  tasks   Task[]
}

model Task {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  status      Status   @default(TODO)
  priority    Priority @default(MEDIUM)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  projectId Int
  project   Project @relation(fields: [projectId], references: [id])

  assigneeId String? @db.Uuid
  assignee   Profile? @relation("AssignedTasks", fields: [assigneeId], references: [id])

  comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())

  userId String @db.Uuid
  author Profile @relation(fields: [userId], references: [id])

  taskId Int
  task   Task @relation(fields: [taskId], references: [id])
}

enum Role {
  ADMIN
  MEMBER
}

enum Status {
  TODO
  IN_PROGRESS
  DONE
  CANCELED
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
